#!/usr/bin/env nix-script-bash
# vim: set ft=bash:

set -e
set -o pipefail

workspaces_json=$(i3-msg -t get_workspaces)
output=$(jq -r '.[] | select(.focused) .output' <<< "$workspaces_json")
workspace=$(cat "/var/run/user/$(id -u)/i3backandforthd/old/$output")

switching_to_output=$(jq -r '.[] | select(.name == "'"$workspace"'") .output' <<< "$workspaces_json")
if [ -n "$switching_to_output" ] && [ "$output" != "$switching_to_output" ]; then
	# backandforthd bug! (repro: use two outputs, then suspend & resume -- probably autorandr is involved)
	# (we're checking to see if the workspace we're switching to is actually on this output)
	# FIXME: if the old workspace doesn't currently exist, this won't detect that we're about to do an incorrect switch
	# If there are exactly two workspaces on this output, switch to the other one
	workspaces_on_this_output=$(jq -r '[ .[] | select(.output == "'"$output"'") ] | length' <<< "$workspaces_json")
	if [ "$workspaces_on_this_output" = 2 ]; then
		# Just switch to the other workspace, it's probably the right thing to do
		current_workspace=$(jq -r '.[] | select(.focused) .name' <<< "$workspaces_json")
		workspace=$(jq -r '.[] | select(.output == "'"$output"'" and .name != "'"$current_workspace"'") .name' <<< "$workspaces_json")
	else
		# Don't want to accidentally switch to the wrong workspace...
		# (this kind of sucks, hm)
		exit
	fi
fi

if [ "$1" != "-n" ] && [ "$1" != "--dry-run" ]; then
	i3-msg "workspace $workspace"
fi

printf '%s\n' "$workspace"
